import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# --- Data prep (same as before) ---
df = data.copy()
df['equity_premium'] = df['ret'] - df['Rfree']
df['dp_lag'] = df['d/p'].shift(1)
df = df.dropna(subset=['equity_premium'])
df['date'] = pd.to_datetime(df['date'])
df = df.set_index('date').sort_index()

start_oos = pd.Timestamp('1965-01-01')

# --- Storage ---
predictions, actuals = [], []

# --- Recursive expanding-window forecasts ---
for date_t in df.index:
    if date_t < start_oos:
        continue

    # estimation window: all data up to (but not including) this date
    est = df.loc[:date_t].iloc[:-1]
    if len(est) < 30:
        continue

    X_train = est[['dp_lag']].values
    y_train = est['equity_premium'].values

    # fit sklearn linear regression
    model = LinearRegression().fit(X_train, y_train)

    # one-step-ahead prediction
    X_pred = np.array([[df.loc[date_t, 'dp_lag']]])
    pred = model.predict(X_pred)[0]

    predictions.append(pred)
    actuals.append(df.loc[date_t, 'equity_premium'])

# --- Convert to arrays and compute OOS R² ---
predictions = np.array(predictions)
actuals = np.array(actuals)

mean_forecast = np.array([actuals[:i].mean() for i in range(1, len(actuals)+1)])
r2_oos = 1 - np.sum((actuals - predictions)**2) / np.sum((actuals - mean_forecast)**2)
print(f"[sklearn OLS] Out-of-sample R²: {r2_oos:.4f}  |  #OOS months: {len(actuals)}")

mse = mean_squared_error(actuals, predictions)
rmse = np.sqrt(mse)
mean_forecast = np.array([actuals[:i].mean() for i in range(1, len(actuals)+1)])
r2_oos = 1 - np.sum((actuals - predictions)**2) / np.sum((actuals - mean_forecast)**2)

print(f"[TimesFM] Device=2 | Valid months={len(actuals)} | MSE={mse:.6f} | RMSE={rmse:.6f} | R²_OS={r2_oos:.4f}")

